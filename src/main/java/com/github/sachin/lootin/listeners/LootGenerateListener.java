package com.github.sachin.lootin.listeners;

import com.github.sachin.lootin.utils.ChestUtils;
import com.github.sachin.lootin.utils.ContainerType;
import com.github.sachin.lootin.utils.LConstants;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.block.*;
import org.bukkit.entity.minecart.StorageMinecart;
import org.bukkit.event.EventHandler;
import org.bukkit.event.world.LootGenerateEvent;
import org.bukkit.loot.LootTable;
import org.bukkit.loot.Lootable;
import org.bukkit.persistence.PersistentDataType;

import java.util.Arrays;

public class LootGenerateListener extends BaseListener{


    private void setLootinContainer(BlockState state, String loottable){
        ContainerType containerType = state.getType()== Material.BARREL ? ContainerType.BARREL : ContainerType.CHEST;
        Container container = (Container) state;
        container.getPersistentDataContainer().set(LConstants.LOOTTABLE_KEY,PersistentDataType.STRING,loottable);
        ((Lootable)container).setLootTable(null);
        container.update(true);
        ChestUtils.setLootinContainer(null,state,containerType);
        plugin.getScheduler().runTaskLater(plugin,() -> {
            ChestUtils.setContainerItems(null,state,containerType, Arrays.asList(container.getInventory().getContents()), LConstants.DATA_KEY.getKey());
            container.getInventory().clear();
            container.update(true);
        },state.getLocation(),1);
    }

//    used when loot is not generated by player, eg. using hopper to get contents of loot chest
    @EventHandler
    public void onLootGenerate(LootGenerateEvent e){
        if(e.getEntity() != null) return;

        if(plugin.isBlackListedLootable(e.getLootTable())) return;
        String loottable = e.getLootTable().getKey().toString();
        if(e.getInventoryHolder() instanceof DoubleChest){
            DoubleChest doubleChest = ChestUtils.getDoubleChest(((BlockState)e.getInventoryHolder()));
            Chest chestLeft = (Chest) doubleChest.getLeftSide();
            Chest chestRight = (Chest) doubleChest.getRightSide();
            setLootinContainer(chestLeft,loottable);
            setLootinContainer(chestRight,loottable);
        }
        if(e.getInventoryHolder() instanceof Chest || e.getInventoryHolder() instanceof Barrel){
            setLootinContainer((BlockState) e.getInventoryHolder(),loottable);
        }

        else if(e.getInventoryHolder() instanceof StorageMinecart){
            StorageMinecart minecart = (StorageMinecart) e.getInventoryHolder();
            minecart.getPersistentDataContainer().set(LConstants.LOOTTABLE_KEY,PersistentDataType.STRING,loottable);
            minecart.setLootTable(null);
            ChestUtils.setLootinContainer(minecart,null,ContainerType.MINECART);
            plugin.getScheduler().runTaskLater(plugin,() -> {
                ChestUtils.setContainerItems(minecart,null,ContainerType.MINECART,Arrays.asList(minecart.getInventory().getContents()),LConstants.DATA_KEY.getKey());
                minecart.getInventory().clear();
            },minecart.getLocation(),1);
        }
    }
}
